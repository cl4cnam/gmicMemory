#!syntax:pythonic

#==========================================
# Utility functions
#==========================================

def makeCardDeck(p_numberOfCombination):
	# Each card has a back and a face
	js (p_numberOfCombination):
		const cardDeck = []
		const effects = []
		const faces = []
		for( let cardNum=1; cardNum<=p_numberOfCombination; cardNum++){
			let effect
			while (true) {
				effect = Math.floor(Math.random() * 9) + 1
				if (! effects.includes(effect)) {
					effects.push(effect)
					break
				}
			}
			let face
			while (true) {
				face = Math.floor(Math.random() * 8) + 1
				if (! faces.includes(face)) {
					faces.push(face)
					break
				}
			}
			cardDeck.push({back : "cardBack.svg", face : "card"+ face + "_" + effect + ".jpg", num : cardNum })
			cardDeck.push({back : "cardBack.svg", face : "card0_" + effect + ".svg", num : cardNum })
			cardDeck.push({back : "cardBack.svg", face : "card"+ face + "_0.jpg", num : cardNum })
		}
		return cardDeck

def shuffleCards(p_cardDeck):
	# shuffle the deck
	js (p_cardDeck):
		//~ copied from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
		for (let i = p_cardDeck.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[p_cardDeck[i], p_cardDeck[j]] = [p_cardDeck[j], p_cardDeck[i]];
		}

def distributeCards(p_cardDeck):
	# place all the cards face downward onto the game table
	js (p_cardDeck):
		const gameTable = document.getElementById("gameTable");
		gameTable.innerHTML = ''
		gameTable.scrollIntoView()
		for(let card of p_cardDeck){
			const cardElement = document.createElement('img');
			cardElement.src= "img/" + card.back
			card.cardElement = cardElement
			gameTable.appendChild(cardElement)
		}

def showFace(p_card):
	js (p_card):
		p_card.cardElement.src = "img/" + p_card.face

def showBack(p_card):
	js (p_card):
		p_card.cardElement.src = "img/" + p_card.back

#==========================================
# Game Course
#==========================================

def gameCourse(p_numberOfCombination, p_SIGNAL_memorizeDuration, p_SIGNAL_clickOnCard):

	# Prepare game table
	#=======================

	var cardDeck := makeCardDeck(p_numberOfCombination)

	# shuffle deck
	shuffleCards(cardDeck)

	# place cards face downward onto the game table
	distributeCards(cardDeck)

	# Start of game
	#=======================

	# transform JavaScript Array into FuncSug "parallel list"
	var allRemainingCards := listToPar(cardDeck)
	# now, allRemainingCards is a "parallel list" of all cards placed on the table

	while not isNovalue(allRemainingCards):
		
		var allClickedCards := parallel(for anyCard in allRemainingCards, select 3):
			# In the following code, anyCard is only a single card
			select:
				awaitClickBeep(anyCard.cardElement)
				bip(p_SIGNAL_clickOnCard)
			do:
				# now, anyCard can only be a clicked card
				
				# show the face of the clicked card
				showFace(anyCard)
				# return the clicked card (which is then "union-ed" to allClickedCards by "allClickedCards := parallelOfSelected...")
				anyCard

		# Compare visible faces
		#----------------------
		if allEqual(allClickedCards.num):
			print('OK')
			js (allClickedCards):
				allClickedCards.cardElement.classList.add('OK')
			allRemainingCards := valuesFrom(allRemainingCards, 'butNotFrom', allClickedCards)
		else:
			print('Missed')
			addCssClassTo('theClickedCards', allClickedCards.cardElement)
			waitSeconds(get(p_SIGNAL_memorizeDuration))
			DelCssClassFrom('theClickedCards', allClickedCards.cardElement)
			showBack(allClickedCards)



#==========================================
# Main
#==========================================

var SIGNAL_clickOnCard

var LABEL_ChangeDistinctCombination
var LABEL_gameCourse

var congratMessage

var numberOfDistinctCombination
var SIGNAL_numberOfSeconds

# Initial value(s) of parameter(s)
numberOfDistinctCombination := awaitSelectedOptionBeep('#distinctNumber')

parallel:
	# Game course
	#------------
	parallel || @LABEL_gameCourse
		removeElt(congratMessage)
		setCssProperty('restart', 'visibility', 'hidden')
		
		resume LABEL_ChangeDistinctCombination
		
		# The main part of the game <------
		gameCourse(numberOfDistinctCombination, 'SIGNAL_numberOfSeconds', 'SIGNAL_clickOnCard')
		congratMessage := displayNewMessage('Congratulations, you have found all related cards!')
	||
		# Change-parameter permission
		# - - - - - - - - - - - - - - -
		awaitBip SIGNAL_clickOnCard
		
		# As soon as a first card is clicked
		pause LABEL_ChangeDistinctCombination
		
		awaitBeep congratMessage
		resume LABEL_ChangeDistinctCombination
	||
		# Restart management
		# - - - - - - - - - -
		awaitBip SIGNAL_clickOnCard
		
		setCssProperty('restart', 'visibility', 'visible')
		awaitClickBeep('#restart')
		
		# As soon as the restart button is clicked
		restart LABEL_gameCourse
		
	# Change of parameters
	#---------------------
	while true: @LABEL_ChangeDistinctCombination
		numberOfDistinctCombination := awaitSelectedOptionBeep('#distinctNumber')
		restart LABEL_gameCourse
		
	while true:
		SIGNAL_numberOfSeconds := awaitSelectedOptionBeep('#memorizeDuration')
